## e.g. 1
- in the middle
  - a[i] = 0 if (> a[i] <)
  - a[i] = max(a[i-1], a[i+1]) + 1 if (a[i-1] < a[i] > a[i+1])
  - a[i] = a[i-1] + 1 if (a[i-1] < a[i] < a[i+1])
  - a[i] = a[i+1] + 1 if (a[i-1] > a[i] > a[i+1])

# s[0] -> (a[0] s[0] a[1])
# s[n-2] -> (a[n-1], s[n-2], a[n-1])
#
# a[i] -> (s[i-1], s[i])

DP = Array.new(N, -1)
def calc(i)
  if (DP[i] > 0)
    return DP[i]
  end

  if (i > 0 && i < N-1)
    if (s[i-1] == '>' && s[i] == '<')
      return (DP[i] = 0)
    end
    if (s[i-1] == '<' && s[i] == '>')
      m = [calc(i-1), calc(i+1)].max
      return (DP[i] = m + 1);
    end
    if (s[i-1] == '<' && s[i] == '<')
      return (DP[i] = calc(i-1) + 1)
    end
    if (s[i-1] == '>' && s[i] == '>')
      return (DP[i] = calc(i+1) + 1)
    end
  end

  if i == 0
    if s[i] == '<'
      return (DP[i] = 0)
    else # s[i] == '>'
      return (DP[i] = calc(i+1) + 1)
    end
  end

  if i == N-1
    if s[i-1] == '<'
      return (DP[i] = calc(i-1) + 1)
    else # s[i-1] == '>'
      return (DP[i] = 0)
    end
  end
end

0.upto(N-1).each do |i|
  calc(i);
end
ans = 0
0.upto(N-1).each do |i|
  ans += DP[i]
end

p ans
